@using Microsoft.AspNet.Identity;
@{
    ViewBag.Title = "GetReviews";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<link rel="stylesheet" href="http://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
<link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.6.3/css/all.css" integrity="sha384-UHRtZLI+pbxtHCWp1t77Bi1L4ZtiqrqD80Kn4Z8NTSRyMA2Fd33n5dQ8lWUE00s/" crossorigin="anonymous"></head>
<script src="http://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
<script src="https://code.jquery.com/jquery-3.2.1.slim.min.js" integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN" crossorigin="anonymous"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.11.0/umd/popper.min.js" integrity="sha384-b/U6ypiBEHpOf/4+1nzFpr53nxSS+GLCkfwBdFNTxtclqqenISfwAzpKaMNFNmj4" crossorigin="anonymous"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta/js/bootstrap.min.js" integrity="sha384-h0AbiXch4ZDo7tp9hKZ4TsHbi047NrKGLO3SEJAg45jXxnGIfYzk4Si90RDIqNm1" crossorigin="anonymous"></script>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
<style type="text/css">
    .tags span {
        margin-right: 1px;
        border: 1px solid #22abc9;
        padding-right: 9px;
        padding-left: 9px;
        padding-top: 1px;
        padding-bottom: 2px;
        border-radius: 15px;
        background-color: #22abc9;
        color: #fff
    }
</style>

<link href="~/Content/review/review.css" rel="stylesheet" />
<link href="~/Content/review/comments-and-reply.css" rel="stylesheet" />



<script type="text/javascript">




    function items(item) {
        var item_names = []
        for (var i = 0; i < item.length; i++) {
            console.log(item[i].Name);
            item_names.push(item[i].Name);
        }


        var taghtml = []
        for (var i = 0; i < item_names.length; i++) {
            console.log(item_names[i]);
            taghtml.push(`<a href="#">${item_names[i]}</a>`);
        }

        var names = taghtml.slice(0, -1).join(' , ') + ' and ' + taghtml.slice(-1);
        console.log(names);
        return names;
    }

    function tags(tag) {
        var tag_names = []
        for (var i = 0; i < tag.length; i++) {
            // console.log(tag[i].Name);
            tag_names.push(tag[i].Name);
        }
        var taghtml = []
        for (var i = 0; i < tag_names.length; i++) {
            console.log(tag_names[i]);
            taghtml.push(` <span>  ${tag_names[i]}  </span>`);
        }
        var tags = taghtml.slice(0, -1).join(' &nbsp; ') + ' &nbsp; ' + taghtml.slice(-1);
        return tags;
        //var names = tag_names.slice(0, -1).join(',') + ' and ' + tag_names.slice(-1);
    }

    function totalLikes(likes) {
        var total_likes = 0;
        if (likes == null) {
            return total_likes;
        }
        if (likes.length > 0) {
            for (var i = 0; i < likes.length; i++) {
                if (likes[i].IsLiked == 1) {
                    total_likes = total_likes + 1;
                }
            }
        }
        console.log(total_likes);
        return total_likes;
    }

    function totalDisLikes(likes) {
        var total_dislikes = 0;
        if (likes == null) {
            return total_dislikes;
        }
        if (likes.length > 0) {
            for (var i = 0; i < likes.length; i++) {
                if (likes[i].IsLiked == 2) {
                    total_dislikes = total_dislikes + 1;
                }
            }
        }

        console.log(total_dislikes);
        return total_dislikes;
    }


    function helpful(likes) {
        var total_help = 0;
        if (likes == null) {
            return total_help;
        }
        if (likes.length > 0) {
            for (var i = 0; i < likes.length; i++) {
                if (likes[i].IsHelpfull == 1) {
                    total_help = total_help + 1;
                }
            }
        }
        console.log(total_help);
        return total_help;
    }


    function total_comment_reply_like(likes) {
        var total_likes = 0;

        if (likes == null) {
            return total_like = 0;
        }
        if (likes.length > 0) {
            for (var i = 0; i < likes.length; i++) {
                if (likes[i].IsLiked == 1) {
                    total_likes = total_likes + 1;
                }
            }
        }
        return total_likes;
    }

    function total_comment_reply_dislike(likes) {
        var total_dislikes = 0;

        if (likes == null) {
            return total_dislike = 0;
        }
        if (likes.length > 0) {
            for (var i = 0; i < likes.length; i++) {
                if (likes[i].IsLiked == 2) {
                    total_dislikes = total_dislikes + 1;
                }
            }
        }
        return total_dislikes;
    }

    function capitalizeFirstLetter(string) {
        return string.charAt(0).toUpperCase() + string.slice(1);
    }

    //////// Reactions Check and show

    function getPostReaction(postId) {
        likeId = "postLike" + String(postId.Id);
        dislikeId = "postDisLike" + String(postId.Id);
        helpfulId = "postHelpful" + String(postId.Id);
        userId = $("#userId").val();
        if (postId.Reactions != null) {
            for (var i = 0; i < postId.Reactions.length; i++) {
                if (userId == postId.Reactions[i].ApplicationUserId) {
                    if (postId.Reactions[i].IsHelpfull == 1) {
                        document.getElementById(helpfulId).style.color = 'red';
                    }
                    if (postId.Reactions[i].IsLiked == 1) {
                        document.getElementById(likeId).style.color = 'red';
                    }
                    else if (postId.Reactions[i].IsLiked == 2) {
                        document.getElementById(dislikeId).style.color = 'red';
                    }
                }
            }
        }
    }

    function getcomment_subcommentReaction(postId) {
        var userId = $("#userId").val();
        if (postId.PostComments != null) {
            for (var i = 0; i < postId.PostComments.length; i++) {
                commentLikeId = "commentLike" + String(postId.PostComments[i].Id);
                commentDisLikeId = "commentDisLike" + String(postId.PostComments[i].Id);
                //comment reaction check
                if (postId.PostComments[i].CommentReactions != null) {
                    console.log("comment reaction found and its length is ");
                    console.log(postId.PostComments[i].CommentReactions.length);
                    for (var j = 0; j < postId.PostComments[i].CommentReactions.length; j++) {
                        if (userId == postId.PostComments[i].CommentReactions[j].ApplicationUserId) {
                            if (postId.PostComments[i].CommentReactions[j].IsLiked == 1) {
                                document.getElementById(commentLikeId).style.color = 'red';
                            }
                            else if (postId.PostComments[i].CommentReactions[j].IsLiked == 2) {
                                document.getElementById(commentDisLikeId).style.color = 'red';
                            }
                        }
                    }

                }
                //subcomment reaction check
                if (postId.PostComments[i].SubComments != null) {
                    for (var k = 0; k < postId.PostComments[i].SubComments.length; k++) {
                        replyLikeId = "replyLike" + String(postId.PostComments[i].SubComments[k].Id);
                        replyDisLikeId = "replyDisLike" + String(postId.PostComments[i].SubComments[k].Id);
                        if (postId.PostComments[i].SubComments[k].ReplyReactions != null) {
                            for (var l = 0; l < postId.PostComments[i].SubComments[k].ReplyReactions.length; l++) {
                                if (userId == postId.PostComments[i].SubComments[k].ReplyReactions[l].ApplicationUserId) {
                                    if (postId.PostComments[i].SubComments[k].ReplyReactions[l].IsLiked == 1) {
                                        document.getElementById(replyLikeId).style.color = 'red';
                                    }
                                    else if (postId.PostComments[i].SubComments[k].ReplyReactions[l].IsLiked == 2) {
                                        document.getElementById(replyDisLikeId).style.color = 'red';
                                    }
                                }
                            }
                        }


                    }
                }

            }
        }

    }

    /////////////////Post reactions

    function createPostReaction(postId, userId, like, helpful) {
        commentReactionUrl = "http://localhost:55407/api/Review/CreateReaction/";
        postId = postId
        userId = userId
        like = like
        helpful = helpful

        var reaction = {
            PostId: postId,
            ApplicationUserId: userId,
            IsLiked: like,
            IsHelpfull: helpful
        }
        $.ajax({
            url: commentReactionUrl,
            type: "POST",
            contentType: 'application/json',
            headers: {
                'Authorization': 'Bearer '
                    + sessionStorage.getItem("accessToken")
            },
            data: JSON.stringify(reaction),
            dataType: "Json",
            success: function (data) {

                console.log(data);
            }
        });

    }

    function deletePostReaction(reactionId) {
        postReactionUrl = "http://localhost:55407/api/Review/DeleteReaction/" + String(reactionId);
        $.ajax({
            url: postReactionUrl,
            type: "DELETE",
            headers: {
                'Authorization': 'Bearer '
                    + sessionStorage.getItem("accessToken")
            },
            success: function (data) {
                console.log(data);
            }
        });
    }



    function updatePostReaction(postId, userId, like, helpful, reactionId) {
        commentReactionUrl = "http://localhost:55407/api/Review/UpdateReaction/" + String(reactionId);
        postId = postId
        userId = userId
        like = like
        helpful = helpful

        var postReaction = {
            PostId: postId,
            ApplicationUserId: userId,
            IsLiked: like,
            IsHelpfull: helpful
        }

        $.ajax({
            url: commentReactionUrl,
            type: "PUT",
            contentType: 'application/json',
            headers: {
                'Authorization': 'Bearer '
                    + sessionStorage.getItem("accessToken")
            },
            data: JSON.stringify(postReaction),
            dataType: "Json",
            success: function (data) {


            }
        });
    }



    function postReaction(x, postId) {
        //postId = postId;
        isLiked = "postLike" + String(postId);
        isDisLike = "postDisLike" + String(postId);
        isHelpful = "postHelpful" + String(postId);
        var userId = $("#userId").val();
        console.log("postid = " + postId);
        postReactionUrl = "http://localhost:55407/api/Review/GetReaction/" + String(postId);
        $.ajax({
            url: postReactionUrl,
            type: "GET",
            headers: {
                'Authorization': 'Bearer '
                    + sessionStorage.getItem("accessToken")
            },
            success: function (data) {
                var userFound;
                $.each(data, function (index, value) {
                    if (userId == value.ApplicationUserId) {
                        userFound = true;
                    }
                    else {
                        userFound = false;
                    }
                });


                if (userFound == true) {
                    $.each(data, function (index, value) {
                        if (userId == value.ApplicationUserId) {
                            if (x.id == isLiked) {
                                console.log("isliked = " + value.IsLiked);
                                console.log("reaction Id =" + value.Id);
                                if (value.IsLiked == 1) {
                                    if (value.IsHelpfull == 1) {
                                        updatePostReaction(postId, userId, 0, 1, value.Id);
                                        console.log("Like button pressed and and removed the like, Helpfull = 1");
                                        document.getElementById(isLiked).style.color = "black";
                                    }
                                    else {
                                        deletePostReaction(value.Id);
                                        document.getElementById(isLiked).style.color = "black";
                                        console.log("Like button pressed and and removed the like and helpful, Helpfull = 0/2");
                                    }
                                }
                                else if (value.IsLiked == 2) {
                                    if (value.IsHelpfull == 1) {
                                        updatePostReaction(postId, userId, 1, 1, value.Id);
                                        console.log("Like button pressed and and removed the dislike, Helpfull = 1");
                                        document.getElementById(isDisLike).style.color = "black";
                                        document.getElementById(isLiked).style.color = "red";
                                    }
                                    else {
                                        updatePostReaction(postId, userId, 1, 0, value.Id);
                                        console.log("Like button pressed and and removed the dislike and helpful, Helpfull = 0/2");
                                        document.getElementById(isDisLike).style.color = "black";
                                        document.getElementById(isLiked).style.color = "red";

                                    }
                                }
                                else {
                                    if (value.IsHelpfull == 1) {
                                        updatePostReaction(postId, userId, 1, 1, value.Id);
                                        console.log("Like button pressed and and added like, Helpfull = 1");
                                        document.getElementById(isDisLike).style.color = "black";
                                        document.getElementById(isLiked).style.color = "red";
                                    }
                                }
                            }
                            else if (x.id == isDisLike) {
                                if (value.IsLiked == 1) {
                                    if (value.IsHelpfull == 1) {
                                        updatePostReaction(postId, userId, 2, 1, value.Id);
                                        console.log("DisLike button pressed and and removed the like added dislike, Helpfull = 1");
                                        document.getElementById(isLiked).style.color = "black";
                                        document.getElementById(isDisLike).style.color = "red";
                                    }
                                    else {
                                        updatePostReaction(postId, userId, 2, 0, value.Id);
                                        console.log("DisLike button pressed and and removed the like added dislike, Helpfull = 0/2");
                                        document.getElementById(isLiked).style.color = "black";
                                        document.getElementById(isDisLike).style.color = "red";
                                    }
                                }
                                else if (value.IsLiked == 2) {
                                    if (value.IsHelpfull == 1) {
                                        updatePostReaction(postId, userId, 0, 1, value.Id);
                                        console.log("DisLike button pressed and and removed the  dislike, Helpfull = 1");
                                        document.getElementById(isLiked).style.color = "black";
                                        document.getElementById(isDisLike).style.color = "black";
                                    }
                                    else {
                                        deletePostReaction(value.Id);
                                        document.getElementById(isDisLike).style.color = "black";
                                        console.log("DisLike button pressed  and removed the dislike and helpful, Helpfull = 0/2");
                                    }
                                }
                                else {
                                    if (value.IsHelpfull == 1) {
                                        updatePostReaction(postId, userId, 2, 1, value.Id);
                                        console.log("disLike button pressed and and added dislike, Helpfull = 1");
                                        document.getElementById(isDisLike).style.color = "red";
                                        document.getElementById(isLiked).style.color = "black";
                                    }
                                }
                            }
                            else if (x.id == isHelpful) {
                                if (value.IsHelpfull == 1) {
                                    if (value.IsLiked == 1) {
                                        updatePostReaction(postId, userId, 1, 0, value.Id);
                                        console.log("helpful button pressed and and removed the helpful, isliked = 1");
                                        document.getElementById(isHelpful).style.color = "black";
                                    }
                                    else if (value.IsLiked == 2) {
                                        updatePostReaction(postId, userId, 2, 0, value.Id);
                                        console.log("helpful button pressed and and removed the helpful, isliked = 2");
                                        document.getElementById(isHelpful).style.color = "black";
                                    }
                                    else {
                                        deletePostReaction(value.Id);
                                        console.log("helpful button pressed and and removed the helpful, isliked = 0");
                                        document.getElementById(isHelpful).style.color = "black";
                                    }
                                }
                                else {
                                    if (value.IsLiked == 1) {
                                        updatePostReaction(postId, userId, 1, 1, value.Id);
                                        console.log("helpful button pressed and and added the helpful, isliked = 1");
                                        document.getElementById(isHelpful).style.color = "red";
                                    }
                                    else if (value.IsLiked == 2) {
                                        updatePostReaction(postId, userId, 2, 1, value.Id);
                                        console.log("helpful button pressed and and added the helpful, isliked = 2");
                                        document.getElementById(isHelpful).style.color = "red";
                                    }
                                }
                            }
                        }

                    });
                }
                else {
                    if (x.id == isLiked) {
                        createPostReaction(postId, userId, 1, 0);
                        console.log("Like button pressed and and created like, ishelpfull = 0/2");
                        document.getElementById(isLiked).style.color = "red";
                    }
                    else if (x.id == isDisLike) {
                        createPostReaction(postId, userId, 2, 0);
                        console.log("DisLike button pressed and and created dislike, ishelpfull = 0/2");
                        document.getElementById(isDisLike).style.color = "red";
                    }
                    else if (x.id == isHelpful) {
                        createPostReaction(postId, userId, 0, 1);
                        console.log("helpful button pressed and and created helpful, islike = 0/2+");
                        document.getElementById(isHelpful).style.color = "red";
                    }
                }
            },
        });

    }



    /////// Comment & reply reaction

    function deleteCommentReaction(commentId) {
        commentReactionUrl = "http://localhost:55407/api/Review/DeleteACommentReaction/" + String(commentId);
        $.ajax({
            url: commentReactionUrl,
            type: "DELETE",
            headers: {
                'Authorization': 'Bearer '
                    + sessionStorage.getItem("accessToken")
            },
            success: function (data) {
                console.log(data);
            }
        });
    }



    function deleteReplyReaction(commentId) {
        replyReactionUrl = "http://localhost:55407/api/Review/DeleteAReplyReaction/" + String(commentId);
        $.ajax({
            url: replyReactionUrl,
            type: "DELETE",
            headers: {
                'Authorization': 'Bearer '
                    + sessionStorage.getItem("accessToken")
            },
            success: function (data) {
                console.log(data);
            }
        });
    }




    function postCommentReaction(commentId, userId, like, helpful) {
        commentReactionUrl = "http://localhost:55407/api/Review/PostACommentReaction";
        commentId = commentId
        userId = userId
        like = like
        helpful = helpful

        var commentReaction = {
            PostCommentId: commentId,
            ApplicationUserId: userId,
            IsLiked: like,
            IsHelpfull: helpful
        }
        $.ajax({
            url: commentReactionUrl,
            type: "POST",
            contentType: 'application/json',
            headers: {
                'Authorization': 'Bearer '
                    + sessionStorage.getItem("accessToken")
            },
            data: JSON.stringify(commentReaction),
            dataType: "Json",
            success: function (data) {

                console.log(data);
            }
        });

    }


    function postReplyReaction(commentId, userId, like, helpful) {
        replyReactionUrl = "http://localhost:55407/api/Review/PostAReplyReaction";
        commentId = commentId
        userId = userId
        like = like
        helpful = helpful

        var commentReaction = {
            SubCommentId: commentId,
            ApplicationUserId: userId,
            IsLiked: like,
            IsHelpfull: helpful
        }
        $.ajax({
            url: replyReactionUrl,
            type: "POST",
            contentType: 'application/json',
            headers: {
                'Authorization': 'Bearer '
                    + sessionStorage.getItem("accessToken")
            },
            data: JSON.stringify(commentReaction),
            dataType: "Json",
            success: function (data) {

                console.log(data);
            }
        });

    }



    function updateCommentReaction(commentId, userId, like, helpful, reactionId) {
        commentReactionUrl = "http://localhost:55407/api/Review/UpdateACommentReaction/" + String(reactionId);
        commentId = commentId
        userId = userId
        like = like
        helpful = helpful

        var commentReaction = {
            PostCommentId: commentId,
            ApplicationUserId: userId,
            IsLiked: like,
            IsHelpfull: helpful
        }

        $.ajax({
            url: commentReactionUrl,
            type: "PUT",
            contentType: 'application/json',
            headers: {
                'Authorization': 'Bearer '
                    + sessionStorage.getItem("accessToken")
            },
            data: JSON.stringify(commentReaction),
            dataType: "Json",
            success: function (data) {

                console.log(data);
            }
        });
    }


    function updateReplyReaction(commentId, userId, like, helpful, reactionId) {
        commentReactionUrl = "http://localhost:55407/api/Review/UpdateAReplyReaction/" + String(reactionId);
        commentId = commentId
        userId = userId
        like = like
        helpful = helpful

        var commentReaction = {
            SubCommentId: commentId,
            ApplicationUserId: userId,
            IsLiked: like,
            IsHelpfull: helpful
        }

        $.ajax({
            url: commentReactionUrl,
            type: "PUT",
            contentType: 'application/json',
            headers: {
                'Authorization': 'Bearer '
                    + sessionStorage.getItem("accessToken")
            },
            data: JSON.stringify(commentReaction),
            dataType: "Json",
            success: function (data) {

                console.log(data);
            }
        });
    }




    function commentsReaction(x, id) {
        var userId = $("#userId").val();
        console.log("this is the value of xxxxxxxxxxxxx");
        console.log(id);
        console.log("this is the value of xxxxxxxxxxxxx");
        commentLikeId = "commentLike" + String(id);
        commentDisLikeId = "commentDisLike" + String(id);
        commentReactionsenUrl = "http://localhost:55407/api/Review/GetACommentReactions/" + String(id);

        $.ajax({
            url: commentReactionsenUrl,
            type: "GET",
            headers: {
                'Authorization': 'Bearer '
                    + sessionStorage.getItem("accessToken")
            },
            success: function (data) {

                var isFound;
                $.each(data, function (index, value) {
                    if (userId == value.ApplicationUserId) {
                        isFound = true;
                    }

                    else {
                        isFound = false;
                    }
                });
                if (isFound == true) {
                    $.each(data, function (index, value) {
                        console.log(value);
                        if (userId == value.ApplicationUserId) {
                            if (x.id == commentLikeId) {
                                if (value.IsLiked == 1) {
                                    deleteCommentReaction(value.Id);
                                    document.getElementById(commentLikeId).style.color = 'black';
                                }
                                else if (value.IsLiked == 2) {
                                    updateCommentReaction(id, userId, 1, 0, value.Id)
                                    document.getElementById(commentDisLikeId).style.color = 'black';
                                    document.getElementById(commentLikeId).style.color = 'red';
                                    //update comment Reaction
                                }
                            }
                            else if (x.id == commentDisLikeId) {
                                if (value.IsLiked == 2) {
                                    deleteCommentReaction(value.Id);
                                    document.getElementById(commentDisLikeId).style.color = 'black';
                                }
                                else if (value.IsLiked == 1) {
                                    updateCommentReaction(id, userId, 2, 0, value.Id)
                                    document.getElementById(commentLikeId).style.color = 'black';
                                    document.getElementById(commentDisLikeId).style.color = 'red';
                                    //update comment Reaction
                                }
                            }


                        }
                    });
                }
                else {
                    if (x.id == commentLikeId) {
                        postCommentReaction(id, userId, 1, 0);
                        document.getElementById(commentLikeId).style.color = 'red';
                    }
                    else if (x.id == commentDisLikeId) {
                        postCommentReaction(id, userId, 2, 0);
                        document.getElementById(commentDisLikeId).style.color = 'red';
                    }
                }
            }
        });

    }




    function replyReaction(x, id) {
        var userId = $("#userId").val();
        console.log("this is the value of xxxxxxxxxxxxx");
        console.log(id);
        console.log("this is the value of xxxxxxxxxxxxx");
        replyLikeId = "replyLike" + String(id);
        replyDisLikeId = "replyDisLike" + String(id);
        replyReactionsenUrl = "http://localhost:55407/api/Review/GetAReplyReactions/" + String(id);

        $.ajax({
            url: replyReactionsenUrl,
            type: "GET",
            headers: {
                'Authorization': 'Bearer '
                    + sessionStorage.getItem("accessToken")
            },
            success: function (data) {

                var isFound;
                $.each(data, function (index, value) {
                    if (userId == value.ApplicationUserId) {
                        isFound = true;
                    }

                    else {
                        isFound = false;
                    }
                });
                if (isFound == true) {
                    $.each(data, function (index, value) {
                        console.log(value);
                        if (userId == value.ApplicationUserId) {
                            if (x.id == replyLikeId) {
                                if (value.IsLiked == 1) {
                                    deleteReplyReaction(value.Id);
                                    document.getElementById(replyLikeId).style.color = 'black';
                                }
                                else if (value.IsLiked == 2) {
                                    updateReplyReaction(id, userId, 1, 0, value.Id)
                                    document.getElementById(replyDisLikeId).style.color = 'black';
                                    document.getElementById(replyLikeId).style.color = 'red';

                                }
                            }
                            else if (x.id == replyDisLikeId) {
                                if (value.IsLiked == 2) {
                                    deleteReplyReaction(value.Id);
                                    document.getElementById(replyDisLikeId).style.color = 'black';
                                }
                                else if (value.IsLiked == 1) {
                                    updateReplyReaction(id, userId, 2, 0, value.Id)
                                    document.getElementById(replyLikeId).style.color = 'black';
                                    document.getElementById(replyDisLikeId).style.color = 'red';

                                }
                            }


                        }
                    });
                }
                else {
                    if (x.id == replyLikeId) {
                        postReplyReaction(id, userId, 1, 0);
                        document.getElementById(replyLikeId).style.color = 'red';
                    }
                    else if (x.id == replyDisLikeId) {
                        postReplyReaction(id, userId, 2, 0);
                        document.getElementById(replyDisLikeId).style.color = 'red';
                    }
                }
            }
        });

    }




    /////////////////comment and reply add
    function postComments(postcomment) {
        var subcomment = []
        var comments = []
        console.log(postcomment)
        if (postcomment == null) {
            var comment = "";
            return comment;
        }
        if (postcomment.length > 0) {
            for (var i = 0; i < postcomment.length; i++) {
                if (postcomment[i].SubComments.length <= 0) {

                    console.log(111111111111)
                    comments.push(`              <div class="col-md-12">
                        <div class="media"> <img class="mr-3 rounded-circle" alt="Bootstrap Media Preview" src="https://i.imgur.com/stD0Q19.jpg" />
                            <div class="media-body">
                                <div class="row">
                                    <div class="col-12 d-flex">
                                        <h6 style="background-color: #f0f1f2;border-radius: 50px;  padding: 7px 15px 7px 15px;"><a href="#">${capitalizeFirstLetter(postcomment[i].ApplicationUser.Name)}</a>&nbsp; <span>${postcomment[i].Text}  </span></h6>
                                    </div>

                                </div><span class="text-muted" style="font-size:12px"> Id: ${postcomment[i].Id}</span>
                                <div>
                                  <i id="commentLike${postcomment[i].Id}" onclick="commentsReaction(this,${postcomment[i].Id})" class="fa fa-thumbs-up"></i>
                                   <span>${total_comment_reply_like(postcomment[i].CommentReactions)}</span>

                                  <i id="commentDisLike${postcomment[i].Id}" onclick="commentsReaction(this,${postcomment[i].Id})" class="fa fa-thumbs-down"></i>
                                   <span>${total_comment_reply_dislike(postcomment[i].CommentReactions)}</span>
                                </div>
                            </div>
                        </div>
                    <div class="cardbox-comments " style="width:90%;">
                        <span class="comment-avatar float-left">
                            <a href=""><img class=" mr-3 rounded-circle" src="http://www.themashabrand.com/templates/bootsnipp/post/assets/img/users/6.jpg" alt="..."></a>
                        </span>
                        <div class=row >
                        <span>
                          <textarea rows="1" style="height:38px;border-radius: 50px;resize: none;" class="form-control" id="replybox${postcomment[i].Id}" style="width:100%; " placeholder="Write a Reply" type="text" ></textarea> </span>
                          <span>  <button id="replyButton${postcomment[i].Id}" onclick="commentReply(${postcomment[i].Id})" class="btn btn-primary">Reply</button></span>
                        <!--/. Search -->
                        </div>
                    </div>
                 </div>`)
                }
                else {
                    console.log(22222222222222)
                    for (var j = 0; j < postcomment[i].SubComments.length; j++) {
                        subcomment.push(` <div class="media mt-2"> <a class="pr-3" href="#"><img class="rounded-circle" alt="Bootstrap Media Another Preview" src="https://i.imgur.com/xELPaag.jpg" /></a>
                                    <div class="media-body">
                                        <div class="row">
                                            <div class="col-12 d-flex" >
                                                <h6 style="background-color: #f0f1f2;border-radius: 50px;  padding: 7px 15px 7px 15px;"><a href="#">${ capitalizeFirstLetter(postcomment[i].SubComments[j].ApplicationUser.Name)}</a>&nbsp; <span>${postcomment[i].SubComments[j].Text}</span></h6>
                                            </div>
                                        </div> <span class="text-muted" style="font-size:12px"> Id: ${postcomment[i].SubComments[j].Id}</span>
                                <div>
                                   <i id="replyLike${postcomment[i].SubComments[j].Id}" onclick="replyReaction(this,${postcomment[i].SubComments[j].Id})" class="fa fa-thumbs-up"></i>
                                    <span>${total_comment_reply_like(postcomment[i].SubComments[j].ReplyReactions)}</span>
                                  <i id="replyDisLike${postcomment[i].SubComments[j].Id}" onclick="replyReaction(this,${postcomment[i].SubComments[j].Id})" class="fa fa-thumbs-down"></i>
                                   <span>${total_comment_reply_dislike(postcomment[i].SubComments[j].ReplyReactions)}</span>
                                </div>
                                    </div>

                                </div>`);
                    }
                    var commentandsubcomment = subcomment.slice(0, -1).join(' &nbsp; ') + '  ' + subcomment.slice(-1);
                    var subcomment = [];
                    comments.push(`<div class="col-md-12">
                        <div class="media"> <img class="mr-3 rounded-circle" alt="Bootstrap Media Preview" src="https://i.imgur.com/stD0Q19.jpg" />
                            <div class="media-body">
                                <div class="row">
                                    <div class="col-12 d-flex">
                                        <h6 style="background-color: #f0f1f2;border-radius: 50px;  padding: 7px 15px 7px 15px;"><a href="#">${capitalizeFirstLetter(postcomment[i].ApplicationUser.Name)}</a> &nbsp; <span>${postcomment[i].Text}</span></h6>
                                    </div>
                                </div>
                                <div>
                                   <i id="commentLike${postcomment[i].Id}" onclick="commentsReaction(this,${postcomment[i].Id})" class="fa fa-thumbs-up"></i>
                                    <span>${total_comment_reply_like(postcomment[i].CommentReactions)}</span>

                                  <i id="commentDisLike${postcomment[i].Id}" onclick="commentsReaction(this,${postcomment[i].Id})" class="fa fa-thumbs-down"></i>
                                   <span>${total_comment_reply_dislike(postcomment[i].CommentReactions)}</span>
                                </div>
                                <span class="text-muted" style="font-size:12px">  Id: ${postcomment[i].Id}</span>  ${commentandsubcomment}
                            </div>

                        </div>
                    <div class="cardbox-comments " style="width:90%;">
                        <span class="comment-avatar float-left">
                            <a href=""><img class=" mr-3 rounded-circle" src="http://www.themashabrand.com/templates/bootsnipp/post/assets/img/users/6.jpg" alt="..."></a>
                        </span>
                        <div class=row >
                        <span>
                           <textarea rows="1" style="height:38px;border-radius: 50px;resize: none;" class="form-control" id="replybox${postcomment[i].Id}" style="width:100%; " placeholder="Write a Reply" type="text" ></textarea></span>
                           <span> <button id="replyButton${postcomment[i].Id}" onclick="commentReply(${postcomment[i].Id})" class="btn btn-primary">Reply</button></span>
                        <!--/. Search -->
                        </div>
                    </div>
                 </div>`)
                }

            }
            var comment = comments.slice(0, -1).join(' &nbsp; ') + ' &nbsp; ' + comments.slice(-1);
        }
        else {
            var comment = "";
        }

        console.log(comment);
        return comment;


    }


    function postComment(postId) {
        var userId = $("#userId").val();
        console.log(userId);
        postId = postId;
        console.log(postId);
        commentText = $("#commentBox" + postId).val();
        console.log(commentText)
        var comment = {
            ApplicationUserId: String(userId),
            PostId: postId,
            Text: commentText,
        }
        console.log(comment);

        if (commentText.replace(/^\s+|\s+$/g, "").length != 0) {
            $.ajax({
                // url: 'http://reviewbhai.somee.com/api/Review/PostAComment',
                url: 'http://localhost:55407/api/Review/PostAComment',
                type: 'POST',
                contentType: 'application/json',
                headers: {
                    'Authorization': 'Bearer '
                        + sessionStorage.getItem("accessToken")
                },
                data: JSON.stringify(comment),
                dataType: "Json",
                success: function (response) {
                    console.log(response);
                    $('#commentBox' + postId).val("");
                }
            });
        }

    }




    function commentReply(commentId) {
        userId = $("#userId").val();
        console.log(userId);

        commentId = commentId;
        console.log(commentId);



        commentText = $("#replybox" + commentId).val();
        console.log(commentText)

        var comment = {
            ApplicationUserId: String(userId),
            PostCommentId: commentId,
            Text: commentText,
        }
        console.log(comment);
        if (commentText.replace(/^\s+|\s+$/g, "").length != 0) {
            $.ajax({
                // url: 'http://reviewbhai.somee.com/api/Review/PostAReplayAComment/',
                url: 'http://localhost:55407/api/Review/PostAReplayAComment/',
                type: 'POST',
                contentType: 'application/json',
                headers: {
                    'Authorization': 'Bearer '
                        + sessionStorage.getItem("accessToken")
                },
                data: JSON.stringify(comment),
                dataType: "Json",
                success: function (response) {
                    console.log(response);
                    $("#replybox" + commentId).val("");
                }
            });
        }

    }






    function reviewTemplate(review) {

        return `
<section class="hero">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 offset-lg-3">
                <div class="cardbox shadow-lg bg-white">
                    <div class="cardbox-heading">
                        <!-- START dropdown-->
                        <div class="dropdown float-right">
                            <button class="btn btn-flat " type="button" data-toggle="dropdown" aria-expanded="false">
                                <em class="fa fa-ellipsis-h"></em>
                            </button>
                            <div class="dropdown-menu dropdown-scale dropdown-menu-right" role="menu" style="position: absolute; transform: translate3d(-136px, 28px, 0px); top: 0px; left: 0px; will-change: transform;">
                                <a class="dropdown-item" href="#">Hide post</a>
                                <a class="dropdown-item" href="#">Edit</a>
                                <a class="dropdown-item" href="#">Delete</a>
                                <a class="dropdown-item" href="#">Save</a>
                                <a class="dropdown-item" href="#">Report</a>
                            </div>
                        </div><!--/ dropdown -->
                        <div class="media m-0">
                            <div class="d-flex mr-3">
                                <a href="#"><img class="img-fluid rounded-circle" src="http://www.themashabrand.com/templates/bootsnipp/post/assets/img/users/2.jpg" alt="User"></a>
                            </div>
                            <div class="media-body">
                                <p class="m-0">
                                    <a class="mr-2" href="#">${capitalizeFirstLetter(review.ApplicationUser.Name)}</a>reviewed
                                    <a href="#">${items(review.Items)}</a>
                                    at <a class="mr-2" href="#">   <strong>${review.RestaurantOrPalce.ApplicationUser.Name}</strong> </a>
                                </p>
                                <small><span><i class="icon ion-md-pin"></i> ${review.RestaurantOrPalce.Location}</span></small>
                                <small><span><i class="icon ion-md-time"></i> ${review.TimePosted}</span></small>
                            </div>
                        </div><!--/ media -->
                    </div><!--/ cardbox-heading -->
                    <div class="cardbox-item">
                        <img class="img-fluid" style="width:100%;" src="https://i.ibb.co/mTTFQKJ/unnamed.png" alt="Image">

                        <div class="card-block px-2 py-3">
                            <h4><a class="article-title " href="#"><strong>${review.PostTitle}</strong></a> </h4>
                            <div>
                                <div style="padding-bottom: 15px;padding-top: 15px;">
                                    <div class="row">
                                        <div class="article-content offset-lg-2">food = ${review.Stars.Food} </div>
                                        <div class="article-content offset-lg-2">environment = ${review.Stars.Environment} </div>
                                    </div>
                                    <div class="row">
                                        <div class="article-content offset-lg-2">service = ${review.Stars.Service} </div>
                                        <div class="article-content offset-lg-2">cleanliness = ${review.Stars.Cleanliness} </div>
                                    </div>
                                </div>
                            </div>
                            <div>
                                <p class="article-content">${review.PostBody}<a href="#"> Read More</a></p>
                            </div>
                            <div class="tags mb-3" id="tags">
                                ${tags(review.Tags)}
                            </div>
                        </div>
                    </div><!--/ cardbox-item -->
                    <div class="cardbox-base">
                        <ul class="float-right">
                            <li><a><i class="fa fa-comments"></i></a></li>
                            <li><a><em class="mr-5">12</em></a></li>
                        </ul>
                        <ul>
                            <li><a><i id="postLike${review.Id}" onclick="postReaction(this,${review.Id})" class="fa fa-thumbs-up"></i></a></li>

                            <li><a href="#"><img src="http://www.themashabrand.com/templates/bootsnipp/post/assets/img/users/5.jpg" class="img-fluid rounded-circle" alt="User"></a></li>
                            <li><a href="#"><img src="http://www.themashabrand.com/templates/bootsnipp/post/assets/img/users/2.jpg" class="img-fluid rounded-circle" alt="User"></a></li>
                            <li><a><span>${totalLikes(review.Reactions)}</span></a></li>
                        </ul>

                        <ul>
                            <li><a><i id="postDisLike${review.Id}" onclick="postReaction(this,${review.Id})" class="fa fa-thumbs-down"></i></a></li>
                            <li><a href="#"><img src="http://www.themashabrand.com/templates/bootsnipp/post/assets/img/users/3.jpeg" class="img-fluid rounded-circle" alt="User"></a></li>

                            <li><a href="#"><img src="http://www.themashabrand.com/templates/bootsnipp/post/assets/img/users/2.jpg" class="img-fluid rounded-circle" alt="User"></a></li>
                            <li><a><span>${totalDisLikes(review.Reactions)}</span></a></li>
                        </ul>
                        <ul>
                            <li><a><i id="postHelpful${review.Id}" onclick="postReaction(this,${review.Id})" class="fas fa-heart"></i></a></li>
                            <li><a href="#"><img src="http://www.themashabrand.com/templates/bootsnipp/post/assets/img/users/3.jpeg" class="img-fluid rounded-circle" alt="User"></a></li>
                            <li><a href="#"><img src="http://www.themashabrand.com/templates/bootsnipp/post/assets/img/users/1.jpg" class="img-fluid rounded-circle" alt="User"></a></li>

                            <li><a><span>${helpful(review.Reactions)}</span></a></li>
                        </ul>
                    </div><!--/ cardbox-base -->
                    <div class="cardbox-comments " style="width:90%;">
                        <span class="comment-avatar float-left">
                            <a href=""><img class=" mr-3 rounded-circle" src="http://www.themashabrand.com/templates/bootsnipp/post/assets/img/users/6.jpg" alt="..."></a>
                        </span>
                        <div class="row" >
                          <textarea style="height:38px;border-radius: 50px;resize: none;" class="form-control custom-control" id="commentBox${review.Id}" style="width:100%;" rows="1" placeholder="Write a comment" type="text" ></textarea>
                          <span><button  style="border-radius: 50px;"  id="commentButton" onclick="postComment(${review.Id})" class="btn btn-primary">comment</button></span>
                        <!--/. Search -->
                        </div>
                    </div><!--/ cardbox-like -->


<!-----------------------------------------------/. comments and reply -->

 ${postComments(review.PostComments)}

<!-----------------------------------------------/. comments and reply -->


                </div><!--/ cardbox -->

            </div><!--/ col-lg-6 -->
        </div><!--/ row -->
    </div><!--/ container -->
</section>

`
    }
</script>








<input type="hidden" id="userId" name="custId" value=@User.Identity.GetUserId()>



<div class="col-md-10 col-md-offset-1">
    @*<div class="well">
            <input id="btnLoadEmployees" class="btn btn-success"
                   type="button" value="Load Employees" />
        </div>*@


    <ul class="list-items"></ul>
    <div id="listitems">

    </div>


    <div id="divError" class="alert alert-danger collapse">
        <a id="linkClose" href="#" class="close">&times;</a>
        <div id="divErrorText"></div>
    </div>


    <script src="~/Scripts/jquery-3.3.1.min.js"></script>
    <script src="~/Scripts/bootstrap.min.js"></script>


    <script type="text/javascript">

        $(document).ready(function () {

            var id = $('#userId').val();
            console.log(id);

            if (sessionStorage.getItem('accessToken') == null) {
                //window.location.href = "http://reviewbhai.somee.com/user/signin";
                window.location.href = "http://localhost:55407/user/signin";
            }


            $('#linkClose').click(function () {
                $('#divError').hide('fade');
            });

            $('#errorModal').on('hidden.bs.modal', function () {
                window.location.href = "Login.html";
            });

            //$('#btnLoadEmployees').click(function () {
            $.ajax({
                //url: 'http://reviewbhai.somee.com/api/Review/GetReviewPosts',
                url: 'http://localhost:55407/api/Review/GetReviewPosts',
                method: 'GET',
                headers: {
                    'Authorization': 'Bearer '
                        + sessionStorage.getItem("accessToken")
                },

                success: function (data) {
                    console.log(data[0].ApplicationUser.Name);

                    document.getElementById("listitems").innerHTML = `
                                                                    ${ data.map(reviewTemplate).join('')}

                                                `
                    $.each(data, function (index, value) {
                        getPostReaction(value);
                        getcomment_subcommentReaction(value);
                        console.log("value id from document read >");
                        console.log(value);
                    });
                },
                error: function (jQXHR) {
                    // If status code is 401, access token expired, so
                    // redirect the user to the login page
                    if (jQXHR.status == "401") {
                        $('#errorModal').modal('show');
                    }
                    else {
                        $('#divErrorText').text(jqXHR.responseText);
                        $('#divError').show('fade');
                    }
                }


            });
        });
    </script>

</div>